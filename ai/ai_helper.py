import base64
import os
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

class AIHelper:
    def __init__(self):
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY не найден. Проверьте .env файл.")
        self.client = OpenAI(api_key=api_key)

    def extract_table_from_image(self, image_path: str) -> str:
        """
        Отправляет изображение в GPT (Responses API) и получает табличные данные в CSV
        сразу в нужном шаблоне:
        №;Обозначение;Наименование;Ед. изм.;Требуемое кол-во, в ед. изм.;Техническое задание
        """
        with open(image_path, "rb") as img_file:
            image_b64 = base64.b64encode(img_file.read()).decode("utf-8")

        response = self.client.responses.create(
            model="gpt-4.1-mini",
            input=[
                {
                    "role": "system",
                    "content": [
                        {
                            "type": "input_text",
                            "text": (
                                "Ты OCR-помощник. Твоя задача — извлекать таблицы из изображений "
                                "и всегда возвращать результат в формате CSV с разделителем ';'. "
                                "Фиксированный набор колонок: "
                                "№;Обозначение;Наименование;Ед. изм.;Требуемое кол-во, в ед. изм.;Техническое задание"
                            )
                        }
                    ]
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "input_text",
                            "text": (
                                "Распознай таблицу с этого изображения и приведи её "
                                "к указанному шаблону. Если данных для столбца нет — оставь пустую ячейку."
                            )
                        },
                        {
                            "type": "input_image",
                            "image_url": f"data:image/png;base64,{image_b64}"
                        }
                    ]
                }
            ]
        )
        return response.output_text

    def normalize_table_from_text(self, table: list[list[str]]) -> str:
        """
        Отправляет текстовую таблицу в GPT для нормализации к шаблону (CSV).
        """
        table_text = "\n".join([";".join(row) for row in table])

        response = self.client.responses.create(
            model="gpt-4.1-mini",
            input=[
                {
                    "role": "system",
                    "content": [
                        {
                            "type": "input_text",
                            "text": (
                                "Ты помощник по обработке таблиц. "
                                "Приводи любые таблицы к следующему CSV-шаблону: "
                                "№;Обозначение;Наименование;Ед. изм.;Требуемое кол-во, в ед. изм.;Техническое задание"
                                "Наименование может включать обозначения. Извлекай их."
                            )
                        }
                    ]
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "input_text",
                            "text": f"Приведи эту таблицу к шаблону:\n{table_text}"
                        }
                    ]
                }
            ]
        )
        return response.output_text

    def normalize_table_from_csv(self, csv_text: str) -> str:
        """
        Принимает CSV-текст (разделители ; или , неважно),
        отправляет в GPT для приведения к шаблону.
        Возвращает CSV с фиксированными колонками:
        №;Обозначение;Наименование;Ед. изм.;Требуемое кол-во, в ед. изм.;Техническое задание
        """
        system_prompt: str = (
            """
            Ты — ассистент по обработке табличных данных. 
            Твоя задача — преобразовывать сырые CSV- или текстовые списки в структурированный формат с фиксированными колонками:
            №;Обозначение;Наименование;Ед. изм.;Требуемое кол-во, в ед. изм.;Техническое задание.
            Правила обработки:
            1. Новая позиция начинается только если строка начинается с номера (например, `2.26.` или `3.25.`). Всё, что идёт после номера и до первой запятой или тире — это "Наименование".
            2. Если после строки с номером идут дополнительные строки **без номера** (например, начинающиеся с текста или характеристик), и у них нет собственного количества — считать их *продолжением предыдущей позиции*.  
               Такие строки добавляются в поле "Техническое задание" предыдущей позиции, соединяясь через запятую.
            
               Пример:
               2.26. Вертикальная фрезерная головка, 1
                  Коническая полость шпинделя ISO 40,
                  Исполнение крепежного хвостовика инструмента DIN 2080,
               → Должно стать одной строкой.
            
            3. Поле "Техническое задание" всегда является **единым текстовым блоком**, без переносов строк.  
               Если оно содержит запятые или точки с запятой — оберни всё поле в двойные кавычки.
            
            4. Поле "Ед. изм." заполняется так:
               - Если единица измерения указана явно (шт, кг, м, комплект, кВт, мм и т.д.) — перенеси её.
               - **Если единица измерения не указана — автоматически используй `шт.`**
            
            5. Количество извлекается из текста после наименования. Если количество не указано — оставь пустым.
            
            6. Не создавай дополнительных колонок, даже если встречаются лишние `;` — всё лишнее должно попадать в "Техническое задание".
            
            7. Если каких-либо данных не хватает — оставляй пустую ячейку, но не удаляй строку.
            
            8. Никаких комментариев, пояснений или форматирования — **отвечай только валидным CSV в нужных колонках и с разделителем `;`**.
            """
        )

        user_prompt: str = f"""
            Вот сырой CSV. Преобразуй его в формат:
            №;Обозначение;Наименование;Ед. изм.;Требуемое кол-во, в ед. изм.;Техническое задание.
            {csv_text}"""

        response = self.client.responses.create(
            model="gpt-4.1-mini",
            input=[
                {
                    "role": "system",
                    "content": [
                        {
                            "type": "input_text",
                            "text": system_prompt
                        }
                    ]
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "input_text",
                            "text": user_prompt
                        }
                    ]
                }
            ]
        )
        return response.output_text
