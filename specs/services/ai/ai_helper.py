import base64
import os
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

SYSTEM_PROMPT: str = (
        """
        Ты — ассистент по обработке табличных данных. 
        Твоя задача — преобразовывать сырые CSV- или текстовые списки в структурированный формат с фиксированными колонками.
        
        Первая строка результата ДОЛЖНА быть строго такой (без изменений и дополнительных пробелов):
        
        №;Обозначение;Наименование;Ед. изм.;Требуемое кол-во, в ед. изм.;Техническое задание.
        
        После неё должны идти только строки с данными.
        
        Каждая строка результата должна содержать ровно 6 колонок, разделённых `;`, даже если некоторые поля пустые:
        
        1) №  
        2) Обозначение  
        3) Наименование  
        4) Ед. изм.  
        5) Требуемое кол-во, в ед. изм.  
        6) Техническое задание
        
        Если какое-то поле отсутствует — оставь его пустым, но разделители `;` всё равно должны быть на своём месте. Запрещено сокращать количество колонок или менять порядок.
        
        Правила обработки данных:
        
        1. Новая позиция начинается только если строка начинается с номера (например, `2.26.` или `3.25.`). Всё, что идёт после номера и до первой запятой или тире — это "Наименование".
        
        2. Если после строки с номером идут дополнительные строки **без номера** (например, начинающиеся с текста или характеристик), и у них нет собственного количества — считать их *продолжением предыдущей позиции*. Такие строки добавляются в поле "Техническое задание" предыдущей позиции, соединяясь через запятую.
        
        3. Поле "Техническое задание" всегда является **единым текстовым блоком**, без переносов строк. Если оно содержит запятые или точки с запятой — оберни всё поле в двойные кавычки.
        
        4. Поле "Ед. изм." заполняется так:
           - Если единица измерения указана явно (шт, кг, м, комплект, кВт, мм и т.д.) — перенеси её.
           - **Если единица измерения не указана — автоматически используй `шт.`**
        
        5. Количество извлекается из текста после наименования. Если количество не указано — оставь пустым.
        
        6. Не создавай дополнительных колонок, даже если встречаются лишние `;` — всё лишнее должно попадать в "Техническое задание".
        
        7. Если каких-либо данных не хватает — оставляй пустую ячейку, но не удаляй строку.
        
        8. Никаких комментариев, пояснений или форматирования — **отвечай только валидным CSV с разделителем `;` и с обязательной первой строкой-заголовком.**
        """
    )

class AIHelper:
    def __init__(self):
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY не найден. Проверьте .env файл.")
        self.client = OpenAI(api_key=api_key)
        self.system_prompt = SYSTEM_PROMPT

    def extract_table_from_image(self, image_path: str) -> str:
        """
        Отправляет изображение в GPT (Responses API)
        и получает табличные данные в CSV в нужном шаблоне
        """
        with open(image_path, "rb") as img_file:
            image_b64 = base64.b64encode(img_file.read()).decode("utf-8")

        response = self.client.responses.create(
            model="gpt-4.1-mini",
            input=[
                {
                    "role": "system",
                    "content": [
                        {
                            "type": "input_text",
                            "text": self.system_prompt
                        }
                    ]
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "input_text",
                            "text": (
                                "Распознай таблицу с этого изображения и приведи её к указанному шаблону."
                            )
                        },
                        {
                            "type": "input_image",
                            "image_url": f"data:image/png;base64,{image_b64}"
                        }
                    ]
                }
            ]
        )
        return response.output_text

    def normalize_table_from_text(self, table: list[list[str]]) -> str:
        """
        Отправляет текстовую таблицу в GPT для нормализации к шаблону (CSV).
        """
        table_text = "\n".join([";".join(row) for row in table])

        response = self.client.responses.create(
            model="gpt-4.1-mini",
            input=[
                {
                    "role": "system",
                    "content": [
                        {
                            "type": "input_text",
                            "text": self.system_prompt
                        }
                    ]
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "input_text",
                            "text": f"Приведи данные к указанному шаблону. \nДанные: {table_text}"
                        }
                    ]
                }
            ]
        )
        return response.output_text

    def normalize_table_from_csv(self, csv_text: str) -> str:
        """
        Принимает CSV-текст (разделители ; или , неважно),
        отправляет в GPT для приведения к шаблону.
        Возвращает CSV с фиксированными колонками:
        №;Обозначение;Наименование;Ед. изм.;Требуемое кол-во, в ед. изм.;Техническое задание
        """
        response = self.client.responses.create(
            model="gpt-4.1-mini",
            input=[
                {
                    "role": "system",
                    "content": [
                        {
                            "type": "input_text",
                            "text": self.system_prompt
                        }
                    ]
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "input_text",
                            "text": f"Вот сырой CSV: {csv_text}. Приведи данные к указанному шаблону."
                        }
                    ]
                }
            ]
        )
        return response.output_text
